extern __mare_printc(string a) -> void;
extern __mare_printstr(string a) -> void;
extern __mare_printd(double a) -> void;
extern __mare_printf(flt a) -> void;
extern __mare_printi8(i8 a) -> void;
extern __mare_printi16(i16 a) -> void;
extern __mare_printi64(i64 a) -> void;
extern __mare_sqrtf(flt a) -> flt;
extern __mare_sqrtd(double a) -> double;
extern __mare_sind(double a) -> double;

# grab "import.mare"

# Square root (sqrt)
fn unary?(flt v) -> flt
{
  ret __mare_sqrtf(v);
}

fn fact(int v) -> int
{
  if v < 2 then 1 else v * fact(v-1);
}

# Binary max function for double
fn binary~(a b) -> double
{
   if a < b then 
     b 
   else 
     a;
}

# logical NOT
fn unary!(v) -> double
{
  if v then 0 else 1;
}

# Unary negate.
fn unary-(int v) -> int
{
  0-v;
}

# Binary logical or, which does not short circuit.
fn binary| 5 (int LHS, int RHS) -> int
{
  if LHS then
    1
  else if RHS then
    1
  else
    0;
}

# Binary logical and, which does not short circuit.
fn binary& 6 (int LHS, int RHS) -> int
{
  if !LHS then
    0
  else
    !!RHS;
}

# fnine = with slightly lower precedence than relationals.
fn binary= 9 (int LHS, int RHS) -> int
{
  !(LHS < RHS | LHS > RHS);
}

# fnine ':' for sequencing: as a low-precedence operator that ignores operands
# and just returns the RHS.
fn binary : 1 (int x, int y) -> int { ret y; }

fn addIter(i64 n) -> void
{
  var x = 0;
  for i = 1, i < n, 1 in
    x = x+1;
  __mare_printi64(x);
}

fn PrintBetterStar(x y) -> void
{
  for i = 1, i < x, 1.0 in
    for j = i, j < y, 1.0 in 
      __mare_printstr("*");
}

fn max(int a, int b) -> int { if a > b then b else a; }

fn success() -> void { __mare_printstr("\nyay you got it!\n"); } # will just print string

fn failed() -> void { __mare_printstr("Failed!\n"); }

fn custom(flt x) -> void
{
  var n = ?x;
  __mare_printstr("\n----------------\n");
  __mare_printf(n);
  __mare_printstr("----------------\n");
}

fn retint(i16 a) -> i16
{
   ret a*a*a;
}

fn main() -> void
{
  var x = "sid is the goat\n";
  var y = "so am i";
  __mare_printstr(x);
  var a = fact(5);
  var b = retint(12);
  var c = (a+10.0)/2;

  __mare_printstr("*********************\n");
  __mare_printd(15.0~15.1);
  __mare_printstr("*********************\n");

  __mare_printstr("Here is b: ");
  __mare_printi16(b);

  if a > 0 then success() else failed();

  custom(169.0f);

  __mare_printi8(a);
  __mare_printd(c);
  __mare_printd(__mare_sind(c));
  addIter(5);
}
